=====
Usage
=====

To use django-ajax-form-mixin, it requires you add a the AjaxFormMixin to your FromView, and some javascript to any page with the form.

For example, if you had the following form::

    from django import forms

    class ContactForm(forms.Form):
        name = forms.CharField(label='Your Name')
        email = forms.EmailField(label='Your Email')
        message = forms.CharField(label='Your Message', widget=forms.Textarea)

With the following View::

    class ContactFormView(FormView, AjaxValidatingFormMixin):
        template_name = "contact-form.html"
        form_class = ContactForm

And the following urls configuration::

    url(r'^contact/$', ContactFormView.as_view(), name="contact_form"),

And then in the template in which you are displaying the form, you should add::

    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js"></script>
    {% load jquery_validation %}
    {% include_validation %}
    <script type="text/javascript">
        $(function()    {
            $('#form').validate('{% url contact_form %}', 
                                { 
                                    type: 'ul', 
                                    fields: ['id_email'], 
                                    event: 'focusout'
                                    successCallback: function(field) {
                                        if(field.next("span").length == 0) {
                                            field.after("<span class=\"ico-ok\">ok</span>");
                                        }
                                    }
                                });

        });
    </script>

As you can see, you need to have jQuery for this to work(here it is being loaded
from google). 

* type can either be ul, p or table. If no type is defined it defaults to ul.
* fields can be true if all fields need immediate ajax validation response or a list of fields that will need an immediate ajax response.
In the example above only the email field will show imediate validation errors when focusing out of the field.
* event can by any valid jQuery event which is executed on each field (this depends ofcourse on how you've set the fields property).
* successCallback is a callback function that is triggered when the field is valid. It takes one parameter the field that has been validated successfully.
In the the example it adds an icon after the field.

The AjaxValidatingFormMixin only overwrites the post handler. 
So a normal GET request will serve the renderd form as defined in contact-form.html, as usual.
POST request will validate the form and return a JSON response dictionary. 
The response will be handled by the jQuery plugin.

List of fields that should be validated on a per field basis or True for all fields. 
Only those fields listed will be validated upon the given event.
If no form fields are listed or fields is false validation will only happen on submit.
